/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CollectRewards
 * @category generated
 */
export const collectRewardsStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CollectRewardsInstructionArgs'
)
/**
 * Accounts required by the _collectRewards_ instruction
 *
 * @property [] project
 * @property [] missionPool
 * @property [] mission
 * @property [] participation
 * @property [] nft
 * @property [] currency (optional)
 * @property [] mint (optional)
 * @property [] vaultHolderAccount (optional)
 * @property [] vaultTokenAccount (optional)
 * @property [] holderAccount (optional)
 * @property [] tokenAccount (optional)
 * @property [_writable_, **signer**] wallet
 * @property [_writable_] vault
 * @property [] currencyManagerProgram
 * @property [] clock
 * @category Instructions
 * @category CollectRewards
 * @category generated
 */
export type CollectRewardsInstructionAccounts = {
  project: web3.PublicKey
  missionPool: web3.PublicKey
  mission: web3.PublicKey
  participation: web3.PublicKey
  nft: web3.PublicKey
  currency?: web3.PublicKey
  mint?: web3.PublicKey
  vaultHolderAccount?: web3.PublicKey
  vaultTokenAccount?: web3.PublicKey
  holderAccount?: web3.PublicKey
  tokenAccount?: web3.PublicKey
  wallet: web3.PublicKey
  vault: web3.PublicKey
  systemProgram?: web3.PublicKey
  currencyManagerProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  clock: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const collectRewardsInstructionDiscriminator = [
  63, 130, 90, 197, 39, 16, 143, 176,
]

/**
 * Creates a _CollectRewards_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CollectRewards
 * @category generated
 */
export function createCollectRewardsInstruction(
  accounts: CollectRewardsInstructionAccounts,
  programId = new web3.PublicKey('CW2fmed6FRSwoQMBcUDkvbUUHNQXMDgW4zk9Kwn56RRr')
) {
  const [data] = collectRewardsStruct.serialize({
    instructionDiscriminator: collectRewardsInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.project,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.missionPool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mission,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.participation,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.nft,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.currency != null) {
    keys.push({
      pubkey: accounts.currency,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.mint != null) {
    if (accounts.currency == null) {
      throw new Error(
        "When providing 'mint' then 'accounts.currency' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.vaultHolderAccount != null) {
    if (accounts.currency == null || accounts.mint == null) {
      throw new Error(
        "When providing 'vaultHolderAccount' then 'accounts.currency', 'accounts.mint' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.vaultHolderAccount,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.vaultTokenAccount != null) {
    if (
      accounts.currency == null ||
      accounts.mint == null ||
      accounts.vaultHolderAccount == null
    ) {
      throw new Error(
        "When providing 'vaultTokenAccount' then 'accounts.currency', 'accounts.mint', 'accounts.vaultHolderAccount' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.vaultTokenAccount,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.holderAccount != null) {
    if (
      accounts.currency == null ||
      accounts.mint == null ||
      accounts.vaultHolderAccount == null ||
      accounts.vaultTokenAccount == null
    ) {
      throw new Error(
        "When providing 'holderAccount' then 'accounts.currency', 'accounts.mint', 'accounts.vaultHolderAccount', 'accounts.vaultTokenAccount' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.holderAccount,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.tokenAccount != null) {
    if (
      accounts.currency == null ||
      accounts.mint == null ||
      accounts.vaultHolderAccount == null ||
      accounts.vaultTokenAccount == null ||
      accounts.holderAccount == null
    ) {
      throw new Error(
        "When providing 'tokenAccount' then 'accounts.currency', 'accounts.mint', 'accounts.vaultHolderAccount', 'accounts.vaultTokenAccount', 'accounts.holderAccount' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.tokenAccount,
      isWritable: false,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.wallet,
    isWritable: true,
    isSigner: true,
  })
  keys.push({
    pubkey: accounts.vault,
    isWritable: true,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.currencyManagerProgram,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.clock,
    isWritable: false,
    isSigner: false,
  })

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
