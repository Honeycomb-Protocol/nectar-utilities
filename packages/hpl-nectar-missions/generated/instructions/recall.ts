/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  RecallCharacterArgs,
  recallCharacterArgsBeet,
} from '../types/RecallCharacterArgs'

/**
 * @category Instructions
 * @category Recall
 * @category generated
 */
export type RecallInstructionArgs = {
  args: RecallCharacterArgs
}
/**
 * @category Instructions
 * @category Recall
 * @category generated
 */
export const recallStruct = new beet.FixableBeetArgsStruct<
  RecallInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', recallCharacterArgsBeet],
  ],
  'RecallInstructionArgs'
)
/**
 * Accounts required by the _recall_ instruction
 *
 * @property [] characterModel
 * @property [_writable_] project
 * @property [] missionPool
 * @property [] mission
 * @property [_writable_, **signer**] wallet
 * @property [_writable_] vault
 * @property [_writable_] merkleTree
 * @property [] hiveControl
 * @property [] characterManager
 * @property [] compressionProgram
 * @property [] instructionsSysvar
 * @property [] clock
 * @property [] logWrapper
 * @category Instructions
 * @category Recall
 * @category generated
 */
export type RecallInstructionAccounts = {
  characterModel: web3.PublicKey
  project: web3.PublicKey
  missionPool: web3.PublicKey
  mission: web3.PublicKey
  wallet: web3.PublicKey
  vault: web3.PublicKey
  merkleTree: web3.PublicKey
  systemProgram?: web3.PublicKey
  hiveControl: web3.PublicKey
  characterManager: web3.PublicKey
  compressionProgram: web3.PublicKey
  instructionsSysvar: web3.PublicKey
  clock: web3.PublicKey
  logWrapper: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const recallInstructionDiscriminator = [
  116, 112, 101, 191, 131, 230, 83, 84,
]

/**
 * Creates a _Recall_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Recall
 * @category generated
 */
export function createRecallInstruction(
  accounts: RecallInstructionAccounts,
  args: RecallInstructionArgs,
  programId = new web3.PublicKey('HuntaX1CmUt5EByyFPE8pMf13SpvezybmMTtjmpmGmfj')
) {
  const [data] = recallStruct.serialize({
    instructionDiscriminator: recallInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.characterModel,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.project,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.missionPool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mission,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.wallet,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.hiveControl,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.characterManager,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.compressionProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.instructionsSysvar,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapper,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
