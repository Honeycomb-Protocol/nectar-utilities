/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { NftWrapCriteria, nftWrapCriteriaBeet } from './NftWrapCriteria'
/**
 * This type is used to derive the {@link CharacterSource} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link CharacterSource} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type CharacterSourceRecord = {
  Wrapped: {
    mint: web3.PublicKey
    criteria: NftWrapCriteria
    isCompressed: boolean
  }
}

/**
 * Union type respresenting the CharacterSource data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isCharacterSource*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type CharacterSource = beet.DataEnumKeyAsKind<CharacterSourceRecord>

export const isCharacterSourceWrapped = (
  x: CharacterSource
): x is CharacterSource & { __kind: 'Wrapped' } => x.__kind === 'Wrapped'

/**
 * @category userTypes
 * @category generated
 */
export const characterSourceBeet = beet.dataEnum<CharacterSourceRecord>([
  [
    'Wrapped',
    new beet.FixableBeetArgsStruct<CharacterSourceRecord['Wrapped']>(
      [
        ['mint', beetSolana.publicKey],
        ['criteria', nftWrapCriteriaBeet],
        ['isCompressed', beet.bool],
      ],
      'CharacterSourceRecord["Wrapped"]'
    ),
  ],
]) as beet.FixableBeet<CharacterSource, CharacterSource>
