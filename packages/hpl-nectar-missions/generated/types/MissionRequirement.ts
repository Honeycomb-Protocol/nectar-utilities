/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link MissionRequirement} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link MissionRequirement} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type MissionRequirementRecord = {
  Time: { duration: beet.bignum }
}

/**
 * Union type respresenting the MissionRequirement data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isMissionRequirement*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type MissionRequirement =
  beet.DataEnumKeyAsKind<MissionRequirementRecord>

export const isMissionRequirementTime = (
  x: MissionRequirement
): x is MissionRequirement & { __kind: 'Time' } => x.__kind === 'Time'

/**
 * @category userTypes
 * @category generated
 */
export const missionRequirementBeet = beet.dataEnum<MissionRequirementRecord>([
  [
    'Time',
    new beet.BeetArgsStruct<MissionRequirementRecord['Time']>(
      [['duration', beet.u64]],
      'MissionRequirementRecord["Time"]'
    ),
  ],
]) as beet.FixableBeet<MissionRequirement, MissionRequirement>
