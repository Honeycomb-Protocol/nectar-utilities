/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { LockType, lockTypeBeet } from '../types/LockType'

/**
 * Arguments used to create {@link StakingProject}
 * @category Accounts
 * @category generated
 */
export type StakingProjectArgs = {
  bump: number
  vaultBump: number
  project: web3.PublicKey
  key: web3.PublicKey
  rewardMint: web3.PublicKey
  vault: web3.PublicKey
  lockType: LockType
  name: string
  rewardsPerDuration: beet.bignum
  rewardsDuration: beet.bignum
  maxRewardsDuration: beet.COption<beet.bignum>
  minStakeDuration: beet.COption<beet.bignum>
  cooldownDuration: beet.COption<beet.bignum>
  resetStakeDuration: boolean
  allowedMints: boolean
  totalStaked: beet.bignum
  startTime: beet.COption<beet.bignum>
  endTime: beet.COption<beet.bignum>
  collections: Uint8Array
  creators: Uint8Array
}

export const stakingProjectDiscriminator = [233, 46, 2, 127, 221, 160, 137, 203]
/**
 * Holds the data for the {@link StakingProject} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class StakingProject implements StakingProjectArgs {
  private constructor(
    readonly bump: number,
    readonly vaultBump: number,
    readonly project: web3.PublicKey,
    readonly key: web3.PublicKey,
    readonly rewardMint: web3.PublicKey,
    readonly vault: web3.PublicKey,
    readonly lockType: LockType,
    readonly name: string,
    readonly rewardsPerDuration: beet.bignum,
    readonly rewardsDuration: beet.bignum,
    readonly maxRewardsDuration: beet.COption<beet.bignum>,
    readonly minStakeDuration: beet.COption<beet.bignum>,
    readonly cooldownDuration: beet.COption<beet.bignum>,
    readonly resetStakeDuration: boolean,
    readonly allowedMints: boolean,
    readonly totalStaked: beet.bignum,
    readonly startTime: beet.COption<beet.bignum>,
    readonly endTime: beet.COption<beet.bignum>,
    readonly collections: Uint8Array,
    readonly creators: Uint8Array
  ) {}

  /**
   * Creates a {@link StakingProject} instance from the provided args.
   */
  static fromArgs(args: StakingProjectArgs) {
    return new StakingProject(
      args.bump,
      args.vaultBump,
      args.project,
      args.key,
      args.rewardMint,
      args.vault,
      args.lockType,
      args.name,
      args.rewardsPerDuration,
      args.rewardsDuration,
      args.maxRewardsDuration,
      args.minStakeDuration,
      args.cooldownDuration,
      args.resetStakeDuration,
      args.allowedMints,
      args.totalStaked,
      args.startTime,
      args.endTime,
      args.collections,
      args.creators
    )
  }

  /**
   * Deserializes the {@link StakingProject} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [StakingProject, number] {
    return StakingProject.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link StakingProject} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<StakingProject> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find StakingProject account at ${address}`)
    }
    return StakingProject.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '5CLnmLaVPfKKZUFZyLoXaVgwCDNZ43bt3ssNRiLxUnPG'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, stakingProjectBeet)
  }

  /**
   * Deserializes the {@link StakingProject} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [StakingProject, number] {
    return stakingProjectBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link StakingProject} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return stakingProjectBeet.serialize({
      accountDiscriminator: stakingProjectDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link StakingProject} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: StakingProjectArgs) {
    const instance = StakingProject.fromArgs(args)
    return stakingProjectBeet.toFixedFromValue({
      accountDiscriminator: stakingProjectDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link StakingProject} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: StakingProjectArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      StakingProject.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link StakingProject} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      vaultBump: this.vaultBump,
      project: this.project.toBase58(),
      key: this.key.toBase58(),
      rewardMint: this.rewardMint.toBase58(),
      vault: this.vault.toBase58(),
      lockType: 'LockType.' + LockType[this.lockType],
      name: this.name,
      rewardsPerDuration: (() => {
        const x = <{ toNumber: () => number }>this.rewardsPerDuration
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      rewardsDuration: (() => {
        const x = <{ toNumber: () => number }>this.rewardsDuration
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      maxRewardsDuration: this.maxRewardsDuration,
      minStakeDuration: this.minStakeDuration,
      cooldownDuration: this.cooldownDuration,
      resetStakeDuration: this.resetStakeDuration,
      allowedMints: this.allowedMints,
      totalStaked: (() => {
        const x = <{ toNumber: () => number }>this.totalStaked
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      startTime: this.startTime,
      endTime: this.endTime,
      collections: this.collections,
      creators: this.creators,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const stakingProjectBeet = new beet.FixableBeetStruct<
  StakingProject,
  StakingProjectArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['vaultBump', beet.u8],
    ['project', beetSolana.publicKey],
    ['key', beetSolana.publicKey],
    ['rewardMint', beetSolana.publicKey],
    ['vault', beetSolana.publicKey],
    ['lockType', lockTypeBeet],
    ['name', beet.utf8String],
    ['rewardsPerDuration', beet.u64],
    ['rewardsDuration', beet.u64],
    ['maxRewardsDuration', beet.coption(beet.u64)],
    ['minStakeDuration', beet.coption(beet.u64)],
    ['cooldownDuration', beet.coption(beet.u64)],
    ['resetStakeDuration', beet.bool],
    ['allowedMints', beet.bool],
    ['totalStaked', beet.u64],
    ['startTime', beet.coption(beet.i64)],
    ['endTime', beet.coption(beet.i64)],
    ['collections', beet.bytes],
    ['creators', beet.bytes],
  ],
  StakingProject.fromArgs,
  'StakingProject'
)
