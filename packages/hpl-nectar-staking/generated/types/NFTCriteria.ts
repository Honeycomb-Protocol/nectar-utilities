/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link NFTCriteria} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link NFTCriteria} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type NFTCriteriaRecord = {
  None: void /* scalar variant */
  Collection: { address: web3.PublicKey }
  Creator: { address: web3.PublicKey }
  MerkleTree: { address: web3.PublicKey }
}

/**
 * Union type respresenting the NFTCriteria data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isNFTCriteria*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type NFTCriteria = beet.DataEnumKeyAsKind<NFTCriteriaRecord>

export const isNFTCriteriaNone = (
  x: NFTCriteria
): x is NFTCriteria & { __kind: 'None' } => x.__kind === 'None'
export const isNFTCriteriaCollection = (
  x: NFTCriteria
): x is NFTCriteria & { __kind: 'Collection' } => x.__kind === 'Collection'
export const isNFTCriteriaCreator = (
  x: NFTCriteria
): x is NFTCriteria & { __kind: 'Creator' } => x.__kind === 'Creator'
export const isNFTCriteriaMerkleTree = (
  x: NFTCriteria
): x is NFTCriteria & { __kind: 'MerkleTree' } => x.__kind === 'MerkleTree'

/**
 * @category userTypes
 * @category generated
 */
export const nFTCriteriaBeet = beet.dataEnum<NFTCriteriaRecord>([
  ['None', beet.unit],

  [
    'Collection',
    new beet.BeetArgsStruct<NFTCriteriaRecord['Collection']>(
      [['address', beetSolana.publicKey]],
      'NFTCriteriaRecord["Collection"]'
    ),
  ],

  [
    'Creator',
    new beet.BeetArgsStruct<NFTCriteriaRecord['Creator']>(
      [['address', beetSolana.publicKey]],
      'NFTCriteriaRecord["Creator"]'
    ),
  ],

  [
    'MerkleTree',
    new beet.BeetArgsStruct<NFTCriteriaRecord['MerkleTree']>(
      [['address', beetSolana.publicKey]],
      'NFTCriteriaRecord["MerkleTree"]'
    ),
  ],
]) as beet.FixableBeet<NFTCriteria, NFTCriteria>
