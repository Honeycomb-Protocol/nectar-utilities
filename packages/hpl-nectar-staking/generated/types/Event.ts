/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
/**
 * This type is used to derive the {@link Event} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link Event} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type EventRecord = {
  NewNft: { address: web3.PublicKey; timestamp: beet.bignum }
  NewStaker: { address: web3.PublicKey; timestamp: beet.bignum }
  Stake: {
    nftAddress: web3.PublicKey
    stakerAddress: web3.PublicKey
    timestamp: beet.bignum
  }
  Unstake: {
    nftAddress: web3.PublicKey
    stakerAddress: web3.PublicKey
    timestamp: beet.bignum
  }
  ClaimRewards: {
    nftAddress: web3.PublicKey
    stakerAddress: web3.PublicKey
    amount: beet.bignum
    timestamp: beet.bignum
  }
}

/**
 * Union type respresenting the Event data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isEvent*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type Event = beet.DataEnumKeyAsKind<EventRecord>

export const isEventNewNft = (x: Event): x is Event & { __kind: 'NewNft' } =>
  x.__kind === 'NewNft'
export const isEventNewStaker = (
  x: Event
): x is Event & { __kind: 'NewStaker' } => x.__kind === 'NewStaker'
export const isEventStake = (x: Event): x is Event & { __kind: 'Stake' } =>
  x.__kind === 'Stake'
export const isEventUnstake = (x: Event): x is Event & { __kind: 'Unstake' } =>
  x.__kind === 'Unstake'
export const isEventClaimRewards = (
  x: Event
): x is Event & { __kind: 'ClaimRewards' } => x.__kind === 'ClaimRewards'

/**
 * @category userTypes
 * @category generated
 */
export const eventBeet = beet.dataEnum<EventRecord>([
  [
    'NewNft',
    new beet.BeetArgsStruct<EventRecord['NewNft']>(
      [
        ['address', beetSolana.publicKey],
        ['timestamp', beet.i64],
      ],
      'EventRecord["NewNft"]'
    ),
  ],

  [
    'NewStaker',
    new beet.BeetArgsStruct<EventRecord['NewStaker']>(
      [
        ['address', beetSolana.publicKey],
        ['timestamp', beet.i64],
      ],
      'EventRecord["NewStaker"]'
    ),
  ],

  [
    'Stake',
    new beet.BeetArgsStruct<EventRecord['Stake']>(
      [
        ['nftAddress', beetSolana.publicKey],
        ['stakerAddress', beetSolana.publicKey],
        ['timestamp', beet.i64],
      ],
      'EventRecord["Stake"]'
    ),
  ],

  [
    'Unstake',
    new beet.BeetArgsStruct<EventRecord['Unstake']>(
      [
        ['nftAddress', beetSolana.publicKey],
        ['stakerAddress', beetSolana.publicKey],
        ['timestamp', beet.i64],
      ],
      'EventRecord["Unstake"]'
    ),
  ],

  [
    'ClaimRewards',
    new beet.BeetArgsStruct<EventRecord['ClaimRewards']>(
      [
        ['nftAddress', beetSolana.publicKey],
        ['stakerAddress', beetSolana.publicKey],
        ['amount', beet.u64],
        ['timestamp', beet.i64],
      ],
      'EventRecord["ClaimRewards"]'
    ),
  ],
]) as beet.FixableBeet<Event, Event>
