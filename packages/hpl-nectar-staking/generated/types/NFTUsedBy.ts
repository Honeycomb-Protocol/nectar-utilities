/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { GuildRole, guildRoleBeet } from './GuildRole'
/**
 * This type is used to derive the {@link NFTUsedBy} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link NFTUsedBy} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type NFTUsedByRecord = {
  None: void /* scalar variant */
  Missions: void /* scalar variant */
  Guild: { id: web3.PublicKey; role: GuildRole }
}

/**
 * Union type respresenting the NFTUsedBy data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isNFTUsedBy*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type NFTUsedBy = beet.DataEnumKeyAsKind<NFTUsedByRecord>

export const isNFTUsedByNone = (
  x: NFTUsedBy
): x is NFTUsedBy & { __kind: 'None' } => x.__kind === 'None'
export const isNFTUsedByMissions = (
  x: NFTUsedBy
): x is NFTUsedBy & { __kind: 'Missions' } => x.__kind === 'Missions'
export const isNFTUsedByGuild = (
  x: NFTUsedBy
): x is NFTUsedBy & { __kind: 'Guild' } => x.__kind === 'Guild'

/**
 * @category userTypes
 * @category generated
 */
export const nFTUsedByBeet = beet.dataEnum<NFTUsedByRecord>([
  ['None', beet.unit],
  ['Missions', beet.unit],

  [
    'Guild',
    new beet.BeetArgsStruct<NFTUsedByRecord['Guild']>(
      [
        ['id', beetSolana.publicKey],
        ['role', guildRoleBeet],
      ],
      'NFTUsedByRecord["Guild"]'
    ),
  ],
]) as beet.FixableBeet<NFTUsedBy, NFTUsedBy>
