/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateProjectArgs,
  createProjectArgsBeet,
} from '../types/CreateProjectArgs'

/**
 * @category Instructions
 * @category CreateProject
 * @category generated
 */
export type CreateProjectInstructionArgs = {
  args: CreateProjectArgs
}
/**
 * @category Instructions
 * @category CreateProject
 * @category generated
 */
export const createProjectStruct = new beet.FixableBeetArgsStruct<
  CreateProjectInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createProjectArgsBeet],
  ],
  'CreateProjectInstructionArgs'
)
/**
 * Accounts required by the _createProject_ instruction
 *
 * @property [] key
 * @property [_writable_] project
 * @property [] authority
 * @property [] rewardMint
 * @property [_writable_] vault
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category CreateProject
 * @category generated
 */
export type CreateProjectInstructionAccounts = {
  key: web3.PublicKey
  project: web3.PublicKey
  authority: web3.PublicKey
  rewardMint: web3.PublicKey
  vault: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createProjectInstructionDiscriminator = [
  148, 219, 181, 42, 221, 114, 145, 190,
]

/**
 * Creates a _CreateProject_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateProject
 * @category generated
 */
export function createCreateProjectInstruction(
  accounts: CreateProjectInstructionAccounts,
  args: CreateProjectInstructionArgs,
  programId = new web3.PublicKey('8pyniLLXEHVUJKX2h5E9DrvwTsRmSR64ucUYBg8jQgPP')
) {
  const [data] = createProjectStruct.serialize({
    instructionDiscriminator: createProjectInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.key,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.project,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
