/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  UpdateProjectArgs,
  updateProjectArgsBeet,
} from '../types/UpdateProjectArgs'

/**
 * @category Instructions
 * @category UpdateProject
 * @category generated
 */
export type UpdateProjectInstructionArgs = {
  args: UpdateProjectArgs
}
/**
 * @category Instructions
 * @category UpdateProject
 * @category generated
 */
export const updateProjectStruct = new beet.FixableBeetArgsStruct<
  UpdateProjectInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', updateProjectArgsBeet],
  ],
  'UpdateProjectInstructionArgs'
)
/**
 * Accounts required by the _updateProject_ instruction
 *
 * @property [_writable_] project
 * @property [] newAuthority
 * @property [] collection
 * @property [] creator
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category UpdateProject
 * @category generated
 */
export type UpdateProjectInstructionAccounts = {
  project: web3.PublicKey
  newAuthority: web3.PublicKey
  collection: web3.PublicKey
  creator: web3.PublicKey
  authority: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateProjectInstructionDiscriminator = [
  2, 196, 131, 92, 28, 139, 179, 94,
]

/**
 * Creates a _UpdateProject_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateProject
 * @category generated
 */
export function createUpdateProjectInstruction(
  accounts: UpdateProjectInstructionAccounts,
  args: UpdateProjectInstructionArgs,
  programId = new web3.PublicKey('8pyniLLXEHVUJKX2h5E9DrvwTsRmSR64ucUYBg8jQgPP')
) {
  const [data] = updateProjectStruct.serialize({
    instructionDiscriminator: updateProjectInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.project,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collection,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.creator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
