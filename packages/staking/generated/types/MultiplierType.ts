/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
/**
 * This type is used to derive the {@link MultiplierType} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link MultiplierType} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type MultiplierTypeRecord = {
  StakeDuration: { minDuration: beet.bignum }
  NFTCount: { minCount: beet.bignum }
  Creator: { creator: web3.PublicKey }
  Collection: { collection: web3.PublicKey }
}

/**
 * Union type respresenting the MultiplierType data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isMultiplierType*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type MultiplierType = beet.DataEnumKeyAsKind<MultiplierTypeRecord>

export const isMultiplierTypeStakeDuration = (
  x: MultiplierType
): x is MultiplierType & { __kind: 'StakeDuration' } =>
  x.__kind === 'StakeDuration'
export const isMultiplierTypeNFTCount = (
  x: MultiplierType
): x is MultiplierType & { __kind: 'NFTCount' } => x.__kind === 'NFTCount'
export const isMultiplierTypeCreator = (
  x: MultiplierType
): x is MultiplierType & { __kind: 'Creator' } => x.__kind === 'Creator'
export const isMultiplierTypeCollection = (
  x: MultiplierType
): x is MultiplierType & { __kind: 'Collection' } => x.__kind === 'Collection'

/**
 * @category userTypes
 * @category generated
 */
export const multiplierTypeBeet = beet.dataEnum<MultiplierTypeRecord>([
  [
    'StakeDuration',
    new beet.BeetArgsStruct<MultiplierTypeRecord['StakeDuration']>(
      [['minDuration', beet.u64]],
      'MultiplierTypeRecord["StakeDuration"]'
    ),
  ],

  [
    'NFTCount',
    new beet.BeetArgsStruct<MultiplierTypeRecord['NFTCount']>(
      [['minCount', beet.u64]],
      'MultiplierTypeRecord["NFTCount"]'
    ),
  ],

  [
    'Creator',
    new beet.BeetArgsStruct<MultiplierTypeRecord['Creator']>(
      [['creator', beetSolana.publicKey]],
      'MultiplierTypeRecord["Creator"]'
    ),
  ],

  [
    'Collection',
    new beet.BeetArgsStruct<MultiplierTypeRecord['Collection']>(
      [['collection', beetSolana.publicKey]],
      'MultiplierTypeRecord["Collection"]'
    ),
  ],
]) as beet.FixableBeet<MultiplierType, MultiplierType>
