/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Overflow: 'Opertaion overflowed'
 *
 * @category Errors
 * @category generated
 */
export class OverflowError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'Overflow'
  constructor() {
    super('Opertaion overflowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new OverflowError())
createErrorFromNameLookup.set('Overflow', () => new OverflowError())

/**
 * OnlyOwner: 'Only the owner can perform this operation'
 *
 * @category Errors
 * @category generated
 */
export class OnlyOwnerError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'OnlyOwner'
  constructor() {
    super('Only the owner can perform this operation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OnlyOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new OnlyOwnerError())
createErrorFromNameLookup.set('OnlyOwner', () => new OnlyOwnerError())

/**
 * InvalidMetadata: 'Invalid metadata'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMetadataError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidMetadata'
  constructor() {
    super('Invalid metadata')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMetadataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidMetadataError())
createErrorFromNameLookup.set(
  'InvalidMetadata',
  () => new InvalidMetadataError()
)

/**
 * InvalidNFT: 'Invalid NFT'
 *
 * @category Errors
 * @category generated
 */
export class InvalidNFTError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidNFT'
  constructor() {
    super('Invalid NFT')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidNFTError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidNFTError())
createErrorFromNameLookup.set('InvalidNFT', () => new InvalidNFTError())

/**
 * RewardsNotAvailable: 'Rewards not available yet'
 *
 * @category Errors
 * @category generated
 */
export class RewardsNotAvailableError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'RewardsNotAvailable'
  constructor() {
    super('Rewards not available yet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RewardsNotAvailableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new RewardsNotAvailableError())
createErrorFromNameLookup.set(
  'RewardsNotAvailable',
  () => new RewardsNotAvailableError()
)

/**
 * CantStakeYet: 'Can't stake yet'
 *
 * @category Errors
 * @category generated
 */
export class CantStakeYetError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'CantStakeYet'
  constructor() {
    super("Can't stake yet")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CantStakeYetError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new CantStakeYetError())
createErrorFromNameLookup.set('CantStakeYet', () => new CantStakeYetError())

/**
 * CantUnstakeYet: 'Can't unstake yet'
 *
 * @category Errors
 * @category generated
 */
export class CantUnstakeYetError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'CantUnstakeYet'
  constructor() {
    super("Can't unstake yet")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CantUnstakeYetError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new CantUnstakeYetError())
createErrorFromNameLookup.set('CantUnstakeYet', () => new CantUnstakeYetError())

/**
 * DepositAccountNotProvided: 'Deposit account is not provided'
 *
 * @category Errors
 * @category generated
 */
export class DepositAccountNotProvidedError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'DepositAccountNotProvided'
  constructor() {
    super('Deposit account is not provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DepositAccountNotProvidedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1777,
  () => new DepositAccountNotProvidedError()
)
createErrorFromNameLookup.set(
  'DepositAccountNotProvided',
  () => new DepositAccountNotProvidedError()
)

/**
 * NotImplemented: 'Not Implemented'
 *
 * @category Errors
 * @category generated
 */
export class NotImplementedError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'NotImplemented'
  constructor() {
    super('Not Implemented')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotImplementedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new NotImplementedError())
createErrorFromNameLookup.set('NotImplemented', () => new NotImplementedError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
